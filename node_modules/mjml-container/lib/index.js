'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _mjmlCore = require('mjml-core');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagName = 'mj-container';
var parentTag = ['mj-body'];
var defaultMJMLDefinition = {
  attributes: {
    'width': '600px',
    'background-color': null
  },
  inheritedAttributes: ['width']
};
var postRender = function postRender($) {
  var containerWidth = $('.mj-container').data('width');

  $('.mj-container-outlook-open').each(function () {
    var $nextElem = $(this).next();
    var classes = $nextElem.attr('data-class') ? $nextElem.attr('data-class').split(' ').map(function (c) {
      return c + '-outlook';
    }).join(' ') : false;
    $nextElem.removeAttr('data-class');

    $(this).replaceWith(_mjmlCore.helpers.startConditionalTag + '\n      <table role="presentation" border="0" cellpadding="0" cellspacing="0" width="' + containerWidth + '" align="center" style="width:' + containerWidth + 'px;">\n        <tr>\n          <td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;"' + (classes ? ' class="' + classes + '"' : '') + '>\n      ' + _mjmlCore.helpers.endConditionalTag);
  });

  $('.mj-container-outlook-line').each(function () {
    var $nextElem = $(this).next();
    var classes = $nextElem.attr('data-class') ? $nextElem.attr('data-class').split(' ').map(function (c) {
      return c + '-outlook';
    }).join(' ') : false;
    $nextElem.removeAttr('data-class');

    $(this).replaceWith(_mjmlCore.helpers.startConditionalTag + '\n      </td></tr></table>\n      ' + _mjmlCore.helpers.endConditionalTag + '\n      ' + _mjmlCore.helpers.startConditionalTag + '\n      <table role="presentation" border="0" cellpadding="0" cellspacing="0" width="' + containerWidth + '" align="center" style="width:' + containerWidth + 'px;"' + (classes ? ' class="' + classes + '"' : '') + '>\n        <tr>\n          <td style="line-height:0px;font-size:0px;mso-line-height-rule:exactly;">\n      ' + _mjmlCore.helpers.endConditionalTag);
  });

  $('.mj-container-outlook-close').each(function () {
    $(this).replaceWith(_mjmlCore.helpers.startConditionalTag + '\n      </td></tr></table>\n      ' + _mjmlCore.helpers.endConditionalTag);
  });

  $('body').css({ background: $('.mj-container').data('background-color') }).each(function () {
    if ($(this).attr('style') === '') {
      $(this).removeAttr('style');
    }
  });

  $('.mj-container').removeAttr('data-background-color').removeAttr('data-width').each(function () {
    if ($(this).attr('style') === '') {
      $(this).removeAttr('style');
    }
  });

  return $;
};

var Container = (0, _mjmlCore.MJMLElement)(_class = function (_Component) {
  _inherits(Container, _Component);

  function Container() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Container);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Container.__proto__ || Object.getPrototypeOf(Container)).call.apply(_ref, [this].concat(args))), _this), _this.styles = _this.getStyles(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Container, [{
    key: 'getStyles',
    value: function getStyles() {
      var mjAttribute = this.props.mjAttribute;


      return {
        div: {
          backgroundColor: mjAttribute('background-color')
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          renderWrappedOutlookChildren = _props.renderWrappedOutlookChildren,
          mjAttribute = _props.mjAttribute,
          children = _props.children;

      var _helpers$widthParser = _mjmlCore.helpers.widthParser(mjAttribute('width')),
          width = _helpers$widthParser.width;

      var classNames = (0, _classnames2.default)('mj-container', mjAttribute('css-class'));

      return _react2.default.createElement(
        'div',
        {
          className: classNames,
          'data-background-color': mjAttribute('background-color'),
          'data-width': width,
          style: this.styles.div },
        renderWrappedOutlookChildren(children)
      );
    }
  }]);

  return Container;
}(_react.Component)) || _class;

Container.tagName = tagName;
Container.parentTag = parentTag;
Container.defaultMJMLDefinition = defaultMJMLDefinition;
Container.postRender = postRender;

exports.default = Container;