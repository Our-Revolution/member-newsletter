'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.watch = exports.validate = exports.renderStream = exports.renderFile = exports.renderFiles = exports.version = undefined;

var _mjmlCore = require('mjml-core');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _difference = require('lodash/difference');

var _difference2 = _interopRequireDefault(_difference);

var _fileContext = require('./helpers/fileContext');

var _fileContext2 = _interopRequireDefault(_fileContext);

var _promesify = require('./helpers/promesify');

var _timePad = require('./helpers/timePad');

var _timePad2 = _interopRequireDefault(_timePad);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * The version number is the NPM
 * version number. It should be the same as the MJML engine
 */
exports.version = _mjmlCore.version;

/*
 * Minimal Error Handling
 */

var availableErrorOutputFormat = {
  json: JSON.stringify,
  text: function text(errs) {
    return errs.map(function (e) {
      return e.formattedMessage;
    }).join('\n');
  }
};

var error = function error(e) {
  return console.log(e.stack || e);
}; // eslint-disable-line no-console

var isDirectory = function isDirectory(file) {
  try {
    var outputPath = _path2.default.resolve(process.cwd(), file);

    return _fs2.default.statSync(outputPath).isDirectory();
  } catch (e) {
    return false;
  }
};

/*
 * Render an input promise
 */
var render = function render(bufferPromise, _ref) {
  var min = _ref.min,
      output = _ref.output,
      stdout = _ref.stdout,
      fileName = _ref.fileName,
      level = _ref.level;

  var handleError = function handleError(message) {
    return fileName ? error('File: ' + fileName + ' \n' + message) : error(message);
  };

  return bufferPromise.then(function (mjml) {
    return (0, _mjmlCore.mjml2html)(mjml.toString(), { minify: min, filePath: fileName, level: level });
  }).then(function (result) {
    var html = result.html,
        errors = result.errors;

    // non-blocking errors

    if (errors.length > 0) {
      handleError(availableErrorOutputFormat['text'](errors));
    }

    if (stdout) {
      process.stdout.write(html);
    } else {
      return (0, _promesify.write)(output, html);
    }
  }).catch(function (e) {
    error(e.getMessages ? e.getMessages() : e);
    throw e;
  });
};

var outputFileName = function outputFileName(input, output) {
  var outputIsDirectory = isDirectory(output);

  var _path$parse = _path2.default.parse(!output || outputIsDirectory ? input : output),
      ext = _path$parse.ext,
      name = _path$parse.name;

  var dir = outputIsDirectory ? output : './';

  if (output && !outputIsDirectory) {
    var _path$parse2 = _path2.default.parse(output),
        outDir = _path$parse2.dir;

    dir = outDir == '' ? dir : outDir;
  }

  return _path2.default.format({
    dir: dir,
    name: name.replace('.mjml', ''),
    ext: ext == ".mjml" ? '.html' : ext
  });
};

/*
 * Turns an MJML input file into a pretty HTML file
 * min: boolean that specify the output format (pretty/minified)
 */
var renderFiles = exports.renderFiles = function renderFiles(input, options) {
  return new Promise(function (resolve, reject) {
    (0, _glob2.default)(input, function (err, files) {
      var processedFiles = [];

      if (files.length > 1 && options.output && !isDirectory(options.output)) {
        throw new Error('Output destination should be a directory instead of a file');
      }

      files.forEach(function (f) {
        processedFiles.push(renderFile(f, options));
      });

      Promise.all(processedFiles).then(resolve).catch(reject);
    });
  });
};

var renderFile = exports.renderFile = function renderFile(file, _ref2) {
  var output = _ref2.output,
      level = _ref2.level,
      min = _ref2.min,
      stdout = _ref2.stdout;

  return render((0, _promesify.read)(_path2.default.resolve(process.cwd(), file)), {
    output: outputFileName(file, output),
    fileName: file,
    level: level,
    min: min,
    stdout: stdout
  });
};

/**
 * Render based on input stream
 */
var renderStream = exports.renderStream = function renderStream(options) {
  return render((0, _promesify.readStdin)(process.stdin), options);
};

/**
 * Validate an MJML document
 */
var validate = exports.validate = function validate(input, _ref3) {
  var format = _ref3.format;

  return (0, _promesify.read)(input).then(function (content) {
    var MJMLDocument = (0, _mjmlCore.documentParser)(content.toString());
    var body = (0, _find2.default)(MJMLDocument.children, ['tagName', 'mj-body']);

    if (!body || body.children.length == 0) {
      return;
    }

    var report = (0, _mjmlCore.MJMLValidator)(body.children[0]);
    var outputFormat = availableErrorOutputFormat[format] || availableErrorOutputFormat['text'];

    error(outputFormat(report));
  }).catch(function (e) {
    error('Error: ' + e);
    throw e;
  });
};

/*
 * Watch changes on a specific input file by calling render on each change
 */
var watch = exports.watch = function watch(input, options) {
  console.log('Now watching: ' + input); // eslint-disable-line no-console
  renderFile(input, options);

  var dependencies = (0, _fileContext2.default)(input);
  var watcher = _chokidar2.default.watch(dependencies);

  watcher.on('change', function () {
    var now = new Date();
    var newDependencies = (0, _fileContext2.default)(input);

    watcher.unwatch((0, _difference2.default)(dependencies, newDependencies));
    watcher.add((0, _difference2.default)(newDependencies, dependencies));

    dependencies = newDependencies;

    console.log('[' + (0, _timePad2.default)(now.getHours()) + ':' + (0, _timePad2.default)(now.getMinutes()) + ':' + (0, _timePad2.default)(now.getSeconds()) + '] Reloading MJML'); // eslint-disable-line no-console
    renderFile(input, options);
  });

  return watcher;
};