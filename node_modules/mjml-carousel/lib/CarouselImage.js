'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _mjmlCore = require('mjml-core');

var _react = require('react');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagName = 'mj-carousel-image';
var endingTag = true;
var selfClosing = true;
var parentTag = ['mj-carousel'];
var defaultMJMLDefinition = {
  attributes: {
    'alt': null,
    'href': null,
    'rel': null,
    'title': null,
    'src': null,
    'thumbnails-src': null
  }
};
var baseStyles = {};

var CarouselImage = (0, _mjmlCore.MJMLElement)(_class = function (_Component) {
  _inherits(CarouselImage, _Component);

  function CarouselImage() {
    _classCallCheck(this, CarouselImage);

    return _possibleConstructorReturn(this, (CarouselImage.__proto__ || Object.getPrototypeOf(CarouselImage)).apply(this, arguments));
  }

  _createClass(CarouselImage, [{
    key: 'render',
    value: function render() {
      // None should call this...
      return null;
    }
  }]);

  return CarouselImage;
}(_react.Component)) || _class;

CarouselImage.tagName = tagName;
CarouselImage.endingTag = endingTag;
CarouselImage.parentTag = parentTag;
CarouselImage.selfClosing = selfClosing;
CarouselImage.defaultMJMLDefinition = defaultMJMLDefinition;
CarouselImage.baseStyles = baseStyles;

exports.default = CarouselImage;