'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _mjmlCore = require('mjml-core');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _merge = require('lodash/merge');

var _merge2 = _interopRequireDefault(_merge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagName = 'mj-accordion-text';
var endingTag = true;
var parentTag = ['mj-accordion-element'];
var defaultMJMLDefinition = {
  attributes: {
    'background-color': null,
    'font-size': '13px',
    'font-family': null,
    'color': null,
    'padding-bottom': null,
    'padding-left': null,
    'padding-right': null,
    'padding-top': null,
    'padding': '16px'
  }
};
var baseStyles = {
  td: {}
};

var AccordionText = (0, _mjmlCore.MJMLElement)(_class = function (_Component) {
  _inherits(AccordionText, _Component);

  function AccordionText() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AccordionText);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AccordionText.__proto__ || Object.getPrototypeOf(AccordionText)).call.apply(_ref, [this].concat(args))), _this), _this.styles = _this.getStyles(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AccordionText, [{
    key: 'getStyles',
    value: function getStyles() {
      var _props = this.props,
          mjAttribute = _props.mjAttribute,
          defaultUnit = _props.defaultUnit;


      return (0, _merge2.default)({}, baseStyles, {
        td: {
          background: mjAttribute('background-color'),
          color: mjAttribute('color'),
          fontSize: mjAttribute('font-size'),
          fontFamily: mjAttribute('font-family'),
          padding: defaultUnit(mjAttribute('padding'), 'px'),
          paddingTop: defaultUnit(mjAttribute('padding-top'), 'px'),
          paddingBottom: defaultUnit(mjAttribute('padding-bottom'), 'px'),
          paddingRight: defaultUnit(mjAttribute('padding-right'), 'px'),
          paddingLeft: defaultUnit(mjAttribute('padding-left'), 'px')
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          mjContent = _props2.mjContent,
          mjAttribute = _props2.mjAttribute;


      return _react2.default.createElement(
        'td',
        { className: mjAttribute('css-class'), style: this.styles.td },
        mjContent()
      );
    }
  }]);

  return AccordionText;
}(_react.Component)) || _class;

AccordionText.tagName = tagName;
AccordionText.endingTag = endingTag;
AccordionText.parentTag = parentTag;
AccordionText.defaultMJMLDefinition = defaultMJMLDefinition;
AccordionText.baseStyles = baseStyles;

exports.default = AccordionText;