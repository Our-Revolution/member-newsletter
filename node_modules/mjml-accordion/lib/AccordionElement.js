'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _mjmlCore = require('mjml-core');

var _AccordionTitle = require('./AccordionTitle');

var _AccordionTitle2 = _interopRequireDefault(_AccordionTitle);

var _AccordionText = require('./AccordionText');

var _AccordionText2 = _interopRequireDefault(_AccordionText);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagName = 'mj-accordion-element';
var parentTag = ['mj-accordion'];
var defaultMJMLDefinition = {
  attributes: {
    'background-color': null,
    'font-family': null,
    'icon-align': null,
    'icon-wrapped-url': null,
    'icon-wrapped-alt': null,
    'icon-unwrapped-url': null,
    'icon-unwrapped-alt': null,
    'icon-position': null,
    'icon-height': null,
    'icon-width': null
  }
};
var baseStyles = {
  label: {
    fontSize: '13px'
  },
  input: {
    display: 'none'
  },
  title: {
    table: {
      width: '100%'
    },
    td2: {
      padding: '16px'
    },
    img: {
      display: 'none',
      width: '32px',
      height: '32px'
    }
  },
  content: {
    table: {
      width: '100%'
    }
  }
};

var findChildren = function findChildren(elements, tagName) {
  return (0, _find2.default)(elements, function (elem) {
    return elem.props.mjml.get('tagName') == tagName;
  });
};

var AccordionElement = (0, _mjmlCore.MJMLElement)(_class = function (_Component) {
  _inherits(AccordionElement, _Component);

  function AccordionElement() {
    _classCallCheck(this, AccordionElement);

    return _possibleConstructorReturn(this, (AccordionElement.__proto__ || Object.getPrototypeOf(AccordionElement)).apply(this, arguments));
  }

  _createClass(AccordionElement, [{
    key: 'getStyles',
    value: function getStyles() {
      var _props = this.props,
          mjAttribute = _props.mjAttribute,
          defaultUnit = _props.defaultUnit;

      var iconBackground = this.title && this.title.props && this.title.props.mjml && this.title.props.mjml.get('attributes').get('background-color');

      return _mjmlCore.helpers.merge({}, baseStyles, {
        td: {
          background: mjAttribute('background-color')
        },
        label: {
          fontFamily: mjAttribute('font-family')
        },
        title: {
          table: {
            borderBottom: mjAttribute('border')
          },
          td2: {
            background: iconBackground,
            verticalAlign: mjAttribute('icon-align')
          },
          img: {
            width: defaultUnit(mjAttribute('icon-width'), 'px'),
            height: defaultUnit(mjAttribute('icon-height'), 'px')
          }
        },
        content: {
          table: {
            borderBottom: mjAttribute('border')
          }
        }
      });
    }
  }, {
    key: 'renderIcons',
    value: function renderIcons() {
      var mjAttribute = this.props.mjAttribute;


      return _react2.default.createElement(
        'td',
        { className: 'mj-accordion-ico', style: this.styles.title.td2, key: 'icons' },
        _react2.default.createElement('img', {
          key: 'icon-wrapped',
          src: mjAttribute('icon-wrapped-url'),
          alt: mjAttribute('icon-wrapped-alt'),
          className: 'mj-accordion-more',
          style: this.styles.title.img }),
        _react2.default.createElement('img', {
          key: 'icon-unwrapped',
          src: mjAttribute('icon-unwrapped-url'),
          alt: mjAttribute('icon-unwrapped-alt'),
          className: 'mj-accordion-less',
          style: this.styles.title.img })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          mjAttribute = _props2.mjAttribute;


      this.title = findChildren(children ? children.toArray() : [], 'mj-accordion-title');
      this.styles = this.getStyles();

      var content = findChildren(children ? children.toArray() : [], 'mj-accordion-text');
      var accordionTitle = [this.title || _react2.default.createElement(_AccordionTitle2.default, null), this.renderIcons()];

      return _react2.default.createElement(
        'tr',
        { className: mjAttribute('css-class') },
        _react2.default.createElement(
          'td',
          { style: this.styles.td },
          _react2.default.createElement(
            'label',
            { className: 'mj-accordion-element', style: this.styles.label },
            _react2.default.createElement('input', { className: 'mj-accordion-checkbox', type: 'checkbox', style: this.styles.input }),
            _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(
                'div',
                { className: 'mj-accordion-title', key: 'title' },
                _react2.default.createElement(
                  'table',
                  {
                    'data-legacy-border': '0',
                    cellPadding: '0',
                    cellSpacing: '0',
                    style: this.styles.title.table },
                  _react2.default.createElement(
                    'tbody',
                    null,
                    _react2.default.createElement(
                      'tr',
                      null,
                      mjAttribute('icon-position') == 'right' ? accordionTitle : accordionTitle.reverse()
                    )
                  )
                )
              ),
              _react2.default.createElement(
                'div',
                { className: 'mj-accordion-content', key: 'content' },
                _react2.default.createElement(
                  'table',
                  {
                    'data-legacy-border': '0',
                    cellPadding: '0',
                    cellSpacing: '0',
                    style: this.styles.content.table },
                  _react2.default.createElement(
                    'tbody',
                    null,
                    _react2.default.createElement(
                      'tr',
                      null,
                      content || _react2.default.createElement(_AccordionText2.default, null)
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return AccordionElement;
}(_react.Component)) || _class;

AccordionElement.tagName = tagName;
AccordionElement.parentTag = parentTag;
AccordionElement.defaultMJMLDefinition = defaultMJMLDefinition;
AccordionElement.baseStyles = baseStyles;

exports.default = AccordionElement;