'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _mjmlCore = require('mjml-core');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagName = 'mj-button';
var parentTag = ['mj-column', 'mj-hero-content'];
var endingTag = true;
var defaultMJMLDefinition = {
  content: '',
  attributes: {
    "background-color": "#414141",
    "border": "none",
    "border-bottom": null,
    "border-left": null,
    "border-radius": "3px",
    "border-right": null,
    "border-top": null,
    "container-background-color": null,
    "font-style": null,
    "font-size": "13px",
    "font-weight": "normal",
    "font-family": "Ubuntu, Helvetica, Arial, sans-serif",
    "color": "#ffffff",
    "text-decoration": "none",
    "text-transform": "none",
    "align": "center",
    "vertical-align": "middle",
    "href": null,
    "rel": null,
    "text-align": null,
    "inner-padding": "10px 25px",
    "line-height": "120%",
    "padding": "10px 25px",
    "padding-top": null,
    "padding-bottom": null,
    "padding-left": null,
    "padding-right": null,
    "width": null,
    "height": null
  }
};
var baseStyles = {
  table: {
    borderCollapse: 'separate'
  },
  a: {
    textDecoration: 'none'
  }
};

var Button = (0, _mjmlCore.MJMLElement)(_class = function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Button);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Button.__proto__ || Object.getPrototypeOf(Button)).call.apply(_ref, [this].concat(args))), _this), _this.styles = _this.getStyles(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Button, [{
    key: 'getStyles',
    value: function getStyles() {
      var _props = this.props,
          mjAttribute = _props.mjAttribute,
          defaultUnit = _props.defaultUnit;


      return _mjmlCore.helpers.merge({}, baseStyles, {
        table: {
          width: mjAttribute('width')
        },
        td: {
          border: mjAttribute('border'),
          borderBottom: mjAttribute('border-bottom'),
          borderLeft: mjAttribute('border-left'),
          borderRadius: defaultUnit(mjAttribute('border-radius'), "px"),
          borderRight: mjAttribute('border-right'),
          borderTop: mjAttribute('border-top'),
          color: mjAttribute('color'),
          cursor: 'auto',
          fontStyle: mjAttribute('font-style'),
          height: mjAttribute('height'),
          padding: defaultUnit(mjAttribute('inner-padding'), "px"),
          textAlign: mjAttribute('text-align')
        },
        a: {
          background: mjAttribute('background-color'),
          color: mjAttribute('color'),
          fontFamily: mjAttribute('font-family'),
          fontSize: defaultUnit(mjAttribute('font-size')),
          fontStyle: mjAttribute('font-style'),
          fontWeight: mjAttribute('font-weight'),
          lineHeight: mjAttribute('line-height'),
          textDecoration: mjAttribute('text-decoration'),
          textTransform: mjAttribute('text-transform'),
          margin: "0px"
        }
      });
    }
  }, {
    key: 'renderButton',
    value: function renderButton() {
      var _props2 = this.props,
          mjContent = _props2.mjContent,
          mjAttribute = _props2.mjAttribute;


      if (mjAttribute('href')) {
        return _react2.default.createElement('a', {
          dangerouslySetInnerHTML: { __html: mjContent() },
          href: mjAttribute('href'),
          rel: mjAttribute('rel'),
          style: this.styles.a,
          target: '_blank' });
      }

      return _react2.default.createElement('p', {
        dangerouslySetInnerHTML: { __html: mjContent() },
        style: this.styles.a });
    }
  }, {
    key: 'render',
    value: function render() {
      var mjAttribute = this.props.mjAttribute;


      return _react2.default.createElement(
        'table',
        {
          role: 'presentation',
          cellPadding: '0',
          cellSpacing: '0',
          'data-legacy-align': mjAttribute('align'),
          'data-legacy-border': '0',
          style: this.styles.table },
        _react2.default.createElement(
          'tbody',
          null,
          _react2.default.createElement(
            'tr',
            null,
            _react2.default.createElement(
              'td',
              {
                'data-legacy-align': 'center',
                'data-legacy-bgcolor': mjAttribute('background-color') === "none" ? "" : mjAttribute('background-color'),
                'data-legacy-valign': mjAttribute('vertical-align'),
                style: this.styles.td },
              this.renderButton()
            )
          )
        )
      );
    }
  }]);

  return Button;
}(_react.Component)) || _class;

Button.tagName = tagName;
Button.parentTag = parentTag;
Button.endingTag = endingTag;
Button.defaultMJMLDefinition = defaultMJMLDefinition;
Button.baseStyles = baseStyles;

exports.default = Button;