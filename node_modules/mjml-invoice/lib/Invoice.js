'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _mjmlCore = require('mjml-core');

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _mjmlTable = require('mjml-table');

var _mjmlTable2 = _interopRequireDefault(_mjmlTable);

var _numeral = require('numeral');

var _numeral2 = _interopRequireDefault(_numeral);

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _flow = require('lodash/flow');

var _flow2 = _interopRequireDefault(_flow);

var _he = require('he');

var _he2 = _interopRequireDefault(_he);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagName = 'mj-invoice';
var parentTag = ['mj-column'];
var defaultMJMLDefinition = {
  attributes: {
    'align': null,
    'border': '1px solid #ecedee',
    'color': '#b9b9b9',
    'container-background-color': null,
    'font-family': 'Roboto, Ubuntu, Helvetica, Arial, sans-serif',
    'font-size': '13px',
    'format': null,
    'intl': 'name:Name;price:Price;quantity:Quantity',
    'padding': null,
    'padding-top': null,
    'padding-bottom': null,
    'padding-left': null,
    'padding-right': null,
    'line-height': '22px'
  }
};
var baseStyles = {
  th: {
    fontWeight: '700',
    padding: '10px 20px',
    textAlign: 'left',
    textTransform: 'uppercase'
  }
};
var intl = {
  name: 'Name',
  price: 'Price',
  quantity: 'Quantity',
  total: 'Total:'
};

var Invoice = (0, _mjmlCore.MJMLElement)(_class = function (_Component) {
  _inherits(Invoice, _Component);

  function Invoice(props) {
    _classCallCheck(this, Invoice);

    var _this = _possibleConstructorReturn(this, (Invoice.__proto__ || Object.getPrototypeOf(Invoice)).call(this, props));

    _this.styles = _this.getStyles();


    var format = _he2.default.decode(props.mjAttribute('format'));
    var currencies = format.match(/([^-\d.,])+/g);

    _this.items = props.mjml.get('children').filter(function (child) {
      return child.get('tagName') === 'mj-invoice-item';
    });
    _this.format = format.replace(/([^-\d.,])/g, "");
    _this.currency = currencies[0] || null;
    _this.currencyPosition = format.startsWith(_this.currency) ? 'left' : 'right';
    return _this;
  }

  _createClass(Invoice, [{
    key: 'getStyles',
    value: function getStyles() {
      var _props = this.props,
          mjAttribute = _props.mjAttribute,
          defaultUnit = _props.defaultUnit;


      var styles = _mjmlCore.helpers.merge({}, baseStyles, {
        table: {
          color: mjAttribute('color'),
          fontFamily: mjAttribute('font-family'),
          fontSize: defaultUnit(mjAttribute('font-size'), "px"),
          lineHeight: mjAttribute('line-height')
        },
        th: {
          fontFamily: mjAttribute('font-family'),
          fontSize: defaultUnit(mjAttribute('font-size'), "px"),
          lineHeight: mjAttribute('line-height')
        },
        thead: {
          borderBottom: mjAttribute('border')
        },
        tfoot: {
          borderTop: mjAttribute('border')
        },
        total: {
          fontFamily: mjAttribute('font-family'),
          fontSize: defaultUnit(mjAttribute('font-size'), "px"),
          fontWeight: '700',
          lineHeight: mjAttribute('line-height'),
          padding: '10px 20px',
          textAlign: 'right'
        }
      });

      styles.thQuantity = _mjmlCore.helpers.merge({}, styles.th, { textAlign: 'right' });

      return styles;
    }
  }, {
    key: 'getIntlValue',
    value: function getIntlValue() {
      var mjAttribute = this.props.mjAttribute;


      var intlValue = (0, _cloneDeep2.default)(intl);

      mjAttribute('intl').split(';').forEach(function (t) {
        if (t && t.indexOf(':') != -1) {
          t = t.split(':');
          intlValue[t[0].trim()] = t[1].trim();
        }
      });

      return intlValue;
    }
  }, {
    key: 'getTotal',
    value: function getTotal() {
      var format = this.format;
      var currency = this.currency;

      var total = this.items.reduce(function (prev, item) {
        var unitPrice = (0, _flow2.default)(_he2.default.decode, function (v) {
          return (0, _numeral2.default)(v).value();
        }, parseFloat)(item.getIn(['attributes', 'price'])) || 0;
        var quantity = parseInt(item.getIn(['attributes', 'quantity'])) || 0;

        return prev + unitPrice * quantity;
      }, 0);

      var totalFormatted = (0, _numeral2.default)(total).format(format);

      return this.currencyPosition == 'left' ? '' + currency + totalFormatted : '' + totalFormatted + currency;
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      var intlValue = this.getIntlValue();
      var total = this.getTotal();
      return _react2.default.createElement(
        _mjmlTable2.default,
        (0, _omit2.default)(this.props, 'columnElement'),
        _react2.default.createElement(
          'thead',
          null,
          _react2.default.createElement(
            'tr',
            { style: this.styles.thead },
            _react2.default.createElement(
              'th',
              { style: this.styles.th },
              intlValue['name']
            ),
            _react2.default.createElement(
              'th',
              { style: this.styles.th },
              intlValue['price']
            ),
            _react2.default.createElement(
              'th',
              { style: this.styles.thQuantity },
              intlValue['quantity']
            )
          )
        ),
        _react2.default.createElement(
          'tbody',
          null,
          children
        ),
        _react2.default.createElement(
          'tfoot',
          null,
          _react2.default.createElement(
            'tr',
            { style: this.styles.tfoot },
            _react2.default.createElement(
              'th',
              {
                colSpan: '2',
                style: this.styles.th },
              intlValue['total']
            ),
            _react2.default.createElement(
              'td',
              { style: this.styles.total },
              total.replace(/\$/g, '&#36;')
            )
          )
        )
      );
    }
  }]);

  return Invoice;
}(_react.Component)) || _class;

Invoice.tagName = tagName;
Invoice.defaultMJMLDefinition = defaultMJMLDefinition;
Invoice.baseStyles = baseStyles;
Invoice.intl = intl;
Invoice.parentTag = parentTag;

exports.default = Invoice;