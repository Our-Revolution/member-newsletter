'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _mjmlCore = require('mjml-core');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagName = 'mj-table';
var parentTag = ['mj-column', 'mj-hero-content'];
var endingTag = true;
var defaultMJMLDefinition = {
  content: '',
  attributes: {
    'align': 'left',
    'cellpadding': '0',
    'cellspacing': '0',
    'color': '#000',
    'container-background-color': null,
    'font-family': 'Ubuntu, Helvetica, Arial, sans-serif',
    'font-size': '13px',
    'line-height': '22px',
    'padding-bottom': null,
    'padding-left': null,
    'padding-right': null,
    'padding-top': null,
    'padding': '10px 25px',
    'table-layout': 'auto',
    'vertical-align': null,
    'width': '100%'
  }
};

var Table = (0, _mjmlCore.MJMLElement)(_class = function (_Component) {
  _inherits(Table, _Component);

  function Table() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Table);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Table.__proto__ || Object.getPrototypeOf(Table)).call.apply(_ref, [this].concat(args))), _this), _this.styles = _this.getStyles(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Table, [{
    key: 'getStyles',
    value: function getStyles() {
      var _props = this.props,
          mjAttribute = _props.mjAttribute,
          defaultUnit = _props.defaultUnit;


      return {
        table: {
          cellpadding: mjAttribute('cellspadding'),
          cellspacing: mjAttribute('cellspacing'),
          color: mjAttribute('color'),
          fontFamily: mjAttribute('font-family'),
          fontSize: defaultUnit(mjAttribute('font-size')),
          lineHeight: mjAttribute('line-height'),
          tableLayout: mjAttribute('table-layout')
        }
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          mjAttribute = _props2.mjAttribute,
          mjContent = _props2.mjContent;


      return _react2.default.createElement('table', {
        cellPadding: mjAttribute('cellpadding'),
        cellSpacing: mjAttribute('cellspacing'),
        dangerouslySetInnerHTML: { __html: mjContent() },
        'data-legacy-border': '0',
        style: this.styles.table,
        width: mjAttribute('width') });
    }
  }]);

  return Table;
}(_react.Component)) || _class;

Table.tagName = tagName;
Table.parentTag = parentTag;
Table.endingTag = endingTag;
Table.defaultMJMLDefinition = defaultMJMLDefinition;

exports.default = Table;