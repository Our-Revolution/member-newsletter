'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _mjmlCore = require('mjml-core');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var tagName = 'mj-divider';
var parentTag = ['mj-column', 'mj-hero-content'];
var selfClosingTag = true;
var defaultMJMLDefinition = {
  attributes: {
    'align': null,
    'border-color': '#000000',
    'border-style': 'solid',
    'border-width': '4px',
    'container-background-color': null,
    'padding-bottom': null,
    'padding-left': null,
    'padding-right': null,
    'padding-top': null,
    'padding': '10px 25px',
    'vertical-align': null,
    'width': '100%'
  }
};
var baseStyles = {
  p: {
    fontSize: '1px',
    margin: '0px auto'
  }
};
var postRender = function postRender($) {
  $('.mj-divider-outlook').each(function () {
    var insertNode = '<table role="presentation" align="center" border="0" cellpadding="0" cellspacing="0" style="' + $(this).attr('style') + '" width="' + $(this).data('divider-width') + '"><tr><td style="height:0;line-height:0;">&nbsp;</td></tr></table>';

    $(this).removeAttr('data-divider-width').removeAttr('class').after('' + _mjmlCore.helpers.startConditionalTag + insertNode + _mjmlCore.helpers.endConditionalTag);
  });

  return $;
};

var Divider = (0, _mjmlCore.MJMLElement)(_class = function (_Component) {
  _inherits(Divider, _Component);

  function Divider() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Divider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Divider.__proto__ || Object.getPrototypeOf(Divider)).call.apply(_ref, [this].concat(args))), _this), _this.styles = _this.getStyles(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Divider, [{
    key: 'getStyles',
    value: function getStyles() {
      var _props = this.props,
          mjAttribute = _props.mjAttribute,
          defaultUnit = _props.defaultUnit;


      return _mjmlCore.helpers.merge({}, baseStyles, {
        p: {
          borderTop: defaultUnit(mjAttribute('border-width')) + ' ' + mjAttribute('border-style') + ' ' + mjAttribute('border-color'),
          width: defaultUnit(mjAttribute('width'))
        }
      });
    }
  }, {
    key: 'outlookWidth',
    value: function outlookWidth() {
      var mjAttribute = this.props.mjAttribute;

      var parentWidth = parseInt(mjAttribute('parentWidth'));

      var _helpers$widthParser = _mjmlCore.helpers.widthParser(mjAttribute('width')),
          width = _helpers$widthParser.width,
          unit = _helpers$widthParser.unit;

      switch (unit) {
        case '%':
          return parentWidth * width / 100;

        default:
          return width;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement('p', {
        className: 'mj-divider-outlook',
        'data-divider-width': this.outlookWidth(),
        style: this.styles.p });
    }
  }]);

  return Divider;
}(_react.Component)) || _class;

Divider.tagName = tagName;
Divider.parentTag = parentTag;
Divider.selfClosingTag = selfClosingTag;
Divider.defaultMJMLDefinition = defaultMJMLDefinition;
Divider.baseStyles = baseStyles;
Divider.postRender = postRender;

exports.default = Divider;